t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
}
for(i in 1:6) {score_export()}
t
t
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
predTime
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t1
t  <- rbind(t, t1)
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
t
start <- Sys.time()
pred  <- h2o.predict(object = model, newdata = data)
end   <- Sys.time()
predTime <- end - start
start  <- Sys.time()
export <- h2o.exportFile(data = pred[,1:2], path = paste0(dirname(model_path), "/", "pred.csv"), force = T)
end    <- Sys.time()
exportTime <- end - start
t1 <- data.frame(pred = predTime, export = exportTime)
t  <- rbind(t, t1)
t
write.csv(x = t, file = "~/Desktop/t.csv")
dim(data)
152*10^6
152,000,000
152000000
152*10^6 / 7*10^6
15.2*10^6 / 7*10^6
a <- (15.2*10^6) / (7*10^6)
a
t$pred + t$export
mean(t$pred + t$export)
mean(t$pred + t$export) * a
b <- mean(t$pred + t$export) * a
t
96/7
96/7 * 40
(96/7 * 40 )/60
(30/7 * 40 )/60
a
b
b * 96
9623.225/60
9623.225/(60^2)
(b*96)/(60^2)
(b*31)/(60^2)
t
t
a
b
(b*96)/(60^2)
b
(b*32)/(60^2)
library(h2o)
a <- "Jan-2015"
as.Date(a, format = "%b-%Y-%d")
as.Date("Jan-2015-01", format = "%b-%Y-%d")
library(h2o)
?h2o.uploadFile
conn <- h2o.init(nthreads = -1, startH2O = T, port = 63311)
conn <- h2o.init()
d <- h2o.uploadFile(conn, path = normalizePath("~/0xdata/data/allyears2k.csv"))
"VAR_0073,VAR_0105,VAR_0137,VAR_0329,VAR_0351,VAR_0540,VAR_0707,VAR_0791,VAR_0795,VAR_0810,VAR_0855,VAR_0885,VAR_0970,VAR_1127,VAR_1406,target
,0,0,-1,6,84,107,-99999,0,0,-99999,100,76857,100,98,0
04SEP12:00:00:00,1,1,-1,3,63,59,1,1,4,1,92,5296,100,98,0
,0,0,-1,5,48,69,-99999,0,-99999,26,75,999999997,100,98,0
,0,0,-1,5,65,33,3,0,0,3,80,6313,50,3,0
,0,0,-1,6,84,134,1,0,4,6,89,13576,91,98,1
,0,0,-1,2,61,32,1,0,3,5,80,2262,50,98,0
,1,0,57,4,52,87,0,7,0,0,33,143,13,98,1
,0,0,145,2,23,41,3,3,0,39,33,3311,13,1,0
26JAN12:00:00:00,1,1,-1,4,80,60,-99999,5,1,-99999,67,4963,82,1,1"
"VAR_0073,VAR_0105,VAR_0137,VAR_0329,VAR_0351,VAR_0540,VAR_0707,VAR_0791,VAR_0795,VAR_081,VAR_0855,VAR_0885,VAR_0970,VAR_1127,VAR_1406,target,0,0,-1,6,84,107,-99999,0,0,-99999,100,76857,100,98,0
04SEP12:00:00:00,1,1,-1,3,63,59,1,1,4,1,92,5296,100,98,0
,0,0,-1,5,48,69,-99999,0,-99999,26,75,999999997,100,98,0
,0,0,-1,5,65,33,3,0,0,3,80,6313,50,3,0
,0,0,-1,6,84,134,1,0,4,6,89,13576,91,98,1
,0,0,-1,2,61,32,1,0,3,5,80,2262,50,98,0
,1,0,57,4,52,87,0,7,0,0,33,143,13,98,1
,0,0,145,2,23,41,3,3,0,39,33,3311,13,1,0
26JAN12:00:00:00,1,1,-1,4,80,60,-99999,5,1,-99999,67,4963,82,1,1"
library(h2i)
library(h2o)
library(h2o)
h2o.init(nthreads = -1)
pathToData <- normalizePath("~/0xdata/data/airlines_all.05p.csv")
?"h2o.importFolder"
library(h2o)
trainPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_train.csv")
validPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_valid.csv")
train <- h2o.importFile(trainPath, destination_frame = "train")
valid <- h2o.importFile(validPath, destination_frame = "valid")
dim(train)
dim(valid)
names(train)
length(names(train))
featureSet <- c("ODATEDW", "OSOURCE", "STATE", "ZIP", "PVASTATE", "DOB", "RECINHSE", "MDMAUD", "DOMAIN", "CLUSTER", "AGE",
"HOMEOWNR", "CHILD03", "CHILD07",  "CHILD12", "CHILD18", "NUMCHLD", "INCOME", "GENDER", "WEALTH1", "HIT", "COLLECT1",
"VETERANS", "BIBLE", "CATLG", "HOMEE", "PETS", "CDPLAY", "STEREO", "PCOWNERS", "PHOTO", "CRAFTS", "FISHER", "GARDENIN",
"BOATS",  "WALKER", "KIDSTUFF", "CARDS", "PLATES", "PEPSTRFL", "CARDPROM", "MAXADATE", "NUMPROM", "CARDPM12", "NUMPRM12",
"RAMNTALL", "NGIFTALL", "CARDGIFT", "MINRAMNT", "MAXRAMNT", "LASTGIFT", "LASTDATE", "FISTDATE", "TIMELAG", "AVGGIFT",
"HPHONE_D", "RFA_2F", "RFA_2A", "MDMAUD_R", "MDMAUD_F", "MDMAUD_A", "CLUSTER2", "GEOCODE2", "TARGET_D")
length(featureSet)
names(valid)
t <- h2o.importFile(path = "/Users/amy/0xdata/data/cup98VAL_z.csv")
t
dim(train)
dim(valid)
names(t)
t[,1]
dim(t)
trainPath <- normalizePath("~/Downloads/kdd_cup/train/")
trainPath <- normalizePath("~/Downloads/kdd_cup/train/")
validPath <- normalizePath("~/Downloads/kdd_cup/test/")
labelPath <- normalizePath("~/Downloads/kdd_cup/orange_large_train_churn.labels")
train <- h2o.importFile(trainPath, destination_frame = "train")
valid <- h2o.importFile(validPath, destination_frame = "valid")
train <- h2o.importFile(trainPath, destination_frame = "train")
trainPath <- normalizePath("~/Downloads/kdd_cup/train/orange_large_train.data.chunk1.zip")
train <- h2o.importFile(trainPath, destination_frame = "train")
dim(train)
trainPath <- normalizePath("~/Downloads/kdd_cup/train/orange_large_train.data.chunk2.zip")
train <- h2o.importFile(trainPath, destination_frame = "train")
dim(train)
h2o.removeAll()
train1Path <- normalizePath("~/Downloads/kdd_cup/train/orange_large_train.data.chunk1.zip")
train1 <- h2o.importFile("Downloads/kdd_cup/train/orange_large_train.data.chunk1.zip", destination_frame = "train")
train2 <- h2o.importFile("Downloads/kdd_cup/train/orange_large_train.data.chunk2.zip", destination_frame = "train")
train3 <- h2o.importFile("Downloads/kdd_cup/train/orange_large_train.data.chunk3.zip", destination_frame = "train")
names(train1)
length(names(train1))
length(names(train2))
length(names(train3))
length(names(train4))
trainPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_train.csv")
trainPath <- normalizePath("~/Downloads/kdd_cup/train/")
train <- h2o.importFile(trainPath)
trainPath
train1
train1[,14996]
train1[,14997]
dim(train1)
train1[,14996]
train1[,14997]
h2o.init(nthreads = -1)
h <- h2o.importFile("/Users/amy/Downloads/kdd_cup/train/orange_large_train.data.chunk2")
dim(h)
trainPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_train.csv")
validPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_valid.csv")
trainPath
validPath
train <- h2o.importFile(trainPath, destination_frame = "train")
valid <- h2o.importFile(validPath, destination_frame = "valid")
length(names(train))
featureSet <- c("ODATEDW", "OSOURCE", "STATE", "ZIP", "PVASTATE", "DOB", "RECINHSE", "MDMAUD", "DOMAIN", "CLUSTER", "AGE",
"HOMEOWNR", "CHILD03", "CHILD07",  "CHILD12", "CHILD18", "NUMCHLD", "INCOME", "GENDER", "WEALTH1", "HIT", "COLLECT1",
"VETERANS", "BIBLE", "CATLG", "HOMEE", "PETS", "CDPLAY", "STEREO", "PCOWNERS", "PHOTO", "CRAFTS", "FISHER", "GARDENIN",
"BOATS",  "WALKER", "KIDSTUFF", "CARDS", "PLATES", "PEPSTRFL", "CARDPROM", "MAXADATE", "NUMPROM", "CARDPM12", "NUMPRM12",
"RAMNTALL", "NGIFTALL", "CARDGIFT", "MINRAMNT", "MAXRAMNT", "LASTGIFT", "LASTDATE", "FISTDATE", "TIMELAG", "AVGGIFT",
"HPHONE_D", "RFA_2F", "RFA_2A", "MDMAUD_R", "MDMAUD_F", "MDMAUD_A", "CLUSTER2", "GEOCODE2", "TARGET_D")
length(featureSet)
t <- h2o.importFile(path = "/Users/amy/0xdata/data/cup98VAL_z.csv")
featureSet %in% names(t)
all(featureSet %in% names(t))
dim(t)
path <- "/Users/amy/0xdata/data/cup98VAL_z.csv"
data <- h2o.importFile(path = path)
responses <- c("CONTROLN", "TARGET_B")
predictors <- setdiff(featureSet, responses)
which(featureSet == "TARGET_B")
myY <- "TARGET_D"
myX <- setdiff(featureSet, myY)
library(h2oEnsemble)
rand <- h2o.runif(data)
rand <- h2o.runif(data)
rand
valid <- data[rand$rnd > 0.8, ]
train <- data[rand$rnd <= 0.8, ]
dim(train)
dim(valid)
data$myY
data[,myY]
h2o.table(data[,myY])
names(data)
h2o.table(data[,"TARGET_B"])
featureSet <- c("ODATEDW", "OSOURCE", "STATE", "ZIP", "PVASTATE", "DOB", "RECINHSE", "MDMAUD", "DOMAIN", "CLUSTER", "AGE",
"HOMEOWNR", "CHILD03", "CHILD07",  "CHILD12", "CHILD18", "NUMCHLD", "INCOME", "GENDER", "WEALTH1", "HIT", "COLLECT1",
"VETERANS", "BIBLE", "CATLG", "HOMEE", "PETS", "CDPLAY", "STEREO", "PCOWNERS", "PHOTO", "CRAFTS", "FISHER", "GARDENIN",
"BOATS",  "WALKER", "KIDSTUFF", "CARDS", "PLATES", "PEPSTRFL", "CARDPROM", "MAXADATE", "NUMPROM", "CARDPM12", "NUMPRM12",
"RAMNTALL", "NGIFTALL", "CARDGIFT", "MINRAMNT", "MAXRAMNT", "LASTGIFT", "LASTDATE", "FISTDATE", "TIMELAG", "AVGGIFT",
"HPHONE_D", "RFA_2F", "RFA_2A", "MDMAUD_R", "MDMAUD_F", "MDMAUD_A", "CLUSTER2", "GEOCODE2")
myY <- "TARGET_B"
myX <- setdiff(featureSet, myY)
rand <- h2o.runif(data)
train <- data[rand$rnd <= 0.8, ]
valid <- data[rand$rnd > 0.8, ]
data[,myY] <- as.factor(data[,myY])
rand <- h2o.runif(data)
train <- data[rand$rnd <= 0.8, ]
valid <- data[rand$rnd > 0.8, ]
ens <- h2o.ensemble(x = myX, y = myY, training_frame = train, validation_frame = valid)
ens <- h2o.ensemble(x = myX, y = myY, training_frame = train, validation_frame = valid, family = "binomial")
h2o.table(data[,myY])
myY <- "TARGET_B"
myX <- setdiff(featureSet, myY)
data[,myY] <- as.factor(data[,myY])
rand <- h2o.runif(data)
train <- data[rand$rnd <= 0.8, ]
valid <- data[rand$rnd > 0.8, ]
h2o.table(train[,myY])
h2o.table(valid[,myY])
ens <- h2o.ensemble(x = myX, y = myY, training_frame = train, validation_frame = valid, family = "binomial")
gbm_model <- h2o.gbm(x = myX, y = myY, training_frame = train, validation_frame = valid)
gbm_model
names(data)
grep(pattern = "churn", x = names(data))
grep(pattern = "CHURN", x = names(data))
grep(pattern = "Churn", x = names(data))
trainPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_train.csv")
validPath <- normalizePath("~/h2o-3/bigdata/laptop/kdd2009/small-churn/kdd_valid.csv")
train <- h2o.importFile(trainPath, destination_frame = "train")
valid <- h2o.importFile(validPath, destination_frame = "valid")
names(train)
myY = "churn"
myX = setdiff(names(train), myY)
names(train)
myY
is.factor(train[,"churn"])
train[,myY] <- as.factor(train[,myY])
valid[,myY] <- as.factor(valid[,myY])
h2o.table(train[,myY] )
h2o.table(valid[,myY] )
gbm_model <- h2o.gbm(x = myX, y = myY, training_frame = train, validation_frame = valid)
gbm_model
gbm_model@model_id
gbm_model <- h2o.gbm(x = myX, y = myY, training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 16, learn_rate = 0.05,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
myX <- setdiff(myX, "Var192")
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 16, learn_rate = 0.025,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
myX <- setdiff(names(train), myY)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 30, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
myX <- setdiff(names(train), myY)
# Var192
myX <- setdiff(myX, "Var192")
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 30, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 100, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model@model_id
drf_model <- h2o.randomForest(x = myX, y = myY,
training_frame = train, validation_frame = valid, score_each_iteration = T)
drf_model@model_id
drf_model <- h2o.randomForest(x = c(myX, "Var192"), y = myY,
training_frame = train, validation_frame = valid, score_each_iteration = T)
drf_model@model_id
drf_model
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model
h2o.varimp(gbm_model)
myX <- setdiff(myX, c("Var192", "Var197") )
train[,myY] <- as.factor(train[,myY])
valid[,myY] <- as.factor(valid[,myY])
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
myX <- setdiff(myX, c("Var192", "Var197", "Var204") )
train[,myY] <- as.factor(train[,myY])
valid[,myY] <- as.factor(valid[,myY])
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
glm_model <- h2o.glm(x = myX, y = myY, training_frame = train, validation_frame = valid)
?h2o.glm
glm_model <- h2o.glm(x = myX, y = myY, training_frame = train, validation_frame = valid, solver = "L_BFGS")
h2o.varimp(gbm_model)
myX <- setdiff(myX, c("Var192", "Var197", "Var204", "Var126") )
train[,myY] <- as.factor(train[,myY])
valid[,myY] <- as.factor(valid[,myY])
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 10,
training_frame = train, validation_frame = valid, score_each_iteration = T)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 5,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
myX <- setdiff(myX, c("Var192", "Var197", "Var204") )
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 5, min_rows = 5,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 5, min_rows = 20,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
gbm_model
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 5, min_rows = 10,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4, min_rows = 10,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
myX <- setdiff(myX, c("Var192", "Var197", "Var204") )
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 5, min_rows = 10,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4, min_rows = 10,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.0075, max_depth = 4, seed = -5705775963170710000	,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.getModel("GBM_model_R_1447457750750_116")
gbm_model <- h2o.getModel("GBM_model_R_1447457750750_116")
gbm_model
gbm_model@allparameters
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4, balance_classes = T,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
myY <- "churn"
myX <- setdiff(names(train), myY)
# Var192
myX <- setdiff(myX, c("Var192", "Var197", "Var204") )
gbm_model <- h2o.gbm(x = myX, y = myY, ntrees = 200, learn_rate = 0.01, max_depth = 4,
training_frame = train, validation_frame = valid, score_each_iteration = T)
h2o.auc(gbm_model, valid = F)
h2o.auc(gbm_model, valid = T)
h2o.varimp(gbm_model)
dl_model <- h2o.deeplearning(x = myX, y = myY, training_frame = train, validation_frame = valid, epochs = 100)
labels <- h2o.importFile("/Users/amy/Downloads/kdd_cup/orange_large_train_churn.labels")
dim(labels)
library(h2o)
h2o.init(nthreads = -1)
grid <- h2o.grid(algorithm = "deeplearning", hyper_params = list(epochs=c(10,20), hidden=list(c(10,10), c(20,20))))
grid <- h2o.grid(x = 1:4, y = 5, training_frame = iris.hex, algorithm = "deeplearning", hyper_params = list(epochs=c(10,20), hidden=list(c(10,10), c(20,20))))
iris.hex <- as.h2o(iris)
grid <- h2o.grid(x = 1:4, y = 5, training_frame = iris.hex, algorithm = "deeplearning", hyper_params = list(epochs=c(10,20), hidden=list(c(10,10), c(20,20))))
h2o.removeAll()
iris.hex <- as.h2o(iris)
grid <- h2o.grid(x = 1:4, y = 5, training_frame = iris.hex, algorithm = "deeplearning", hyper_params = list(epochs=c(10,200), hidden=list(c(10,10), c(20,20))))
h2o.removeAll()
iris.hex <- as.h2o(iris)
grid <- h2o.grid(x = 1:4, y = 5, training_frame = iris.hex, algorithm = "deeplearning", hyper_params = list(epochs=c(10,10000000), hidden=list(c(10,10), c(20,20))))
h2o.ls()
h2o.ls()$key
grep(pattern = "Grid_DeepLearning_", x = h2o.ls()$key)
h2o.ls()$key
keys[id]
keys <- h2o.ls()$key
id <- grep(pattern = "Grid_DeepLearning_", x = keys)
keys[id]
keys <- as.character(h2o.ls()$key)
id <- grep(pattern = "Grid_DeepLearning_", x = keys)
keys[id]
idx <- grep(pattern = "modelmetrics", x = keys[id])
idx
keys[id][-idx]
m <- h2o.getModel("Grid_DeepLearning_file110935fc0752d_csv_5.hex_6_model_R_1447705588164_7")
m <- h2o.getModel("Grid_DeepLearning_file110935fc0752d_csv_5.hex_6_model_R_1447705588164_7_model_1")
m
m@allparameters$hidden
id
keys
idx
keys[id]
setwd("~/h2o_3_tableau_examples/demos/lending_club/")
library(h2o)
library(Rserve)
h2o.init(nthreads = -1)
pathToData <- normalizePath("../data/lending_club.csv")
lc <- h2o.importFile(path = pathToData, destination_frame = "lc")
myY <- 'bad_loan'
lc[,myY] <- as.factor(lc[,myY])
lc[,myY] <- as.factor(lc[,myY])
lc[,myY]
lc
lc$bad_loan
is.factor(lc$bad_loan)
lc
h2o.shutdown(prompt = F)
library(h2o)
library(Rserve)
h2o.init(nthreads = -1)
pathToData <- normalizePath("../data/lending_club.csv")
lc <- h2o.importFile(path = pathToData, destination_frame = "lc")
is.factor(lc$bad_loan)
lc$bad_loan <- as.factor(lc$bad_loan)
is.factor(lc$bad_loan)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/4/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
setwd("~/h2o_3_tableau_examples/demos/lending_club/")
library(h2o)
library(Rserve)
h2o.init(nthreads = -1)
pathToData <- normalizePath("../data/lending_club.csv")
lc <- h2o.importFile(path = pathToData, destination_frame = "lc")
lc$bad_loan <- as.factor(lc$bad_loan)
gc()
h2o.getId(lc)
lc = h2o.assign(lc,'lc')
h2o.init(nthreads = -1)
pathToData <- normalizePath("../data/lending_club.csv")
lc <- h2o.importFile(path = pathToData, destination_frame = "lc")
lc$bad_loan <- as.factor(lc$bad_loan)
